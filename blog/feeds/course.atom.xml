<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>40423201-2017Spring 協同產品設計實習 (虎尾科大MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/course.atom.xml" rel="self"></link><id>./</id><updated>2017-05-31T11:00:00+08:00</updated><entry><title>Week15</title><link href="./Week%2015.html" rel="alternate"></link><published>2017-05-31T11:00:00+08:00</published><updated>2017-05-31T11:00:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-05-31:./Week 15.html</id><summary type="html">&lt;p&gt;w15 test &lt;/p&gt;


&lt;p&gt;test 1&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Q8JutRlH7dA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 250
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
ctx.beginPath()
ctx.fillStyle = "   #2894FF"
ctx.font = "30px ScriptS"
ctx.fillText("40423201 ", (canvas.width)/2-60, (canvas.width)/2-75)
ctx.stroke()
&lt;/script&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear2" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear2_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear2']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 250
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
ctx.beginPath()
ctx.fillStyle = "   #2894FF"
ctx.font = "30px ScriptS"
ctx.fillText("40423201 ", (canvas.width)/2-60, (canvas.width)/2-75)
ctx.stroke()
&lt;/script&gt;</summary><category term="Brython"></category></entry><entry><title>Week12</title><link href="./Week%2012.html" rel="alternate"></link><published>2017-05-10T11:00:00+08:00</published><updated>2017-05-10T11:00:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-05-10:./Week 12.html</id><summary type="html">&lt;p&gt;2D 正齒輪傳動繪圖 &lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 53
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
ctx.beginPath()
ctx.fillStyle = "   #2894FF"
ctx.font = "10px ScriptS"
ctx.fillText("40423201 ",canvas.width/2-60,canvas.width/2-75)
ctx.stroke()
&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAxes-1v33.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = window.Cobj.new
creategeartooth = window.createGearTooth.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 17
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = cobj(data, "SHAPE", {
        "fillColor":"#ddd0dd",
        "border": True,
        "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = cobj(shapedefs.circle(hr), "PATH")
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
cx = canvas.width/2
cy = canvas.height/2
gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
cgo.render(gear)
ctx.beginPath()
ctx.fillStyle = "   #2894FF"
ctx.font = "30px ScriptS"
ctx.fillText("40423201 ",canvas.width/2-60,canvas.width/2-75)
ctx.stroke()
&lt;/script&gt;</summary><category term="Brython"></category></entry><entry><title>Week11</title><link href="./Week%2011.html" rel="alternate"></link><published>2017-05-03T11:00:00+08:00</published><updated>2017-05-03T11:00:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-05-03:./Week 11.html</id><summary type="html">&lt;p&gt;心得報告&lt;/p&gt;


&lt;p&gt;閱讀心得 two books&lt;/p&gt;
&lt;p&gt;Onshape's Greatest Tech Tips– Volume 1&lt;/p&gt;

&lt;p&gt;心得:&lt;/p&gt;

&lt;p&gt;看完之後了解到on shape功能在應用於產品設計中所代表的意思，如:從追隨模式中，可以合作者和作者同時看到一樣的屏幕，與作者同步討論產品特徵與修改點並及時修改，以及評論與標註功能的使用，可以直接在作品底下留言評論，省去了過往截圖或檔案傳送討論的時間，並可以針對特徵加入標註也省去解說時間讓觀賞者一目了然， 也可從時間軸中看到每次產品的變化，由此可見on shape對於協同的重要性。 &lt;/p&gt;
&lt;p&gt;An Introduction to Agile Product Design&lt;/p&gt;

&lt;p&gt;心得:&lt;/p&gt;

&lt;p&gt;在這競爭激烈的時代中，若越快抓住市場與世界趨勢的人就越有優勢，因此敏捷的產品設計在這時代是不可或缺的能力，由此可知設計使用的軟體也偏向快速、成本低、功能完備、方便討論趨勢，若能縮短產品設計與發佈的時間，越能搶佔市場地位，成為新潮產品，取得專利權，也隨著團隊合作模式的改變，不再像以前的團隊一樣，CAD畫圖階段性接著畫，現在為節省時間都強調，同步處理因此就提到了前面文章中所看的on shape，在此軟體中一方面讓團隊能隨時注意組員畫圖進度並且若要組裝可以馬上應用，一方面因為是網頁式開啟，比起以往需要帶著軟體到處跑，現在只需要有網路皆可開啟討論便利性大大提升許多，符合現在需求這也是on shape的優勢所在。
總心得:看完兩篇文章後一方面了解on shpae的功能應用外，也了解到了他在產品設計中的重要性，並對現代產品設計的趨勢與未來軟體與合作團隊模式的改變有進一步的認知，相信在未來一步步改善後，有機會取代CAD成為主流軟體。&lt;/p&gt;</summary><category term="Brython"></category></entry><entry><title>Week9 期中報告</title><link href="./Week%209.html" rel="alternate"></link><published>2017-04-19T11:20:00+08:00</published><updated>2017-04-19T11:20:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-04-19:./Week 9.html</id><summary type="html">&lt;p&gt;1.Fossil Server 實習查驗&lt;/p&gt;
&lt;p&gt;2.路徑圖&lt;/p&gt;
&lt;p&gt;3.四連桿四足行走機構 &lt;/p&gt;
&lt;p&gt;4.分組協同零件展示&lt;/p&gt;


&lt;p&gt;1.Fossil Server 實習查驗&lt;/p&gt;
&lt;p&gt;&lt;a href = " https://mde2a2.kmol.info/midterm/bg4/index "&gt; bg4 期中報告 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.期中報告Solvespace &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/dbWDoeTXISM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;canvas id="fourbar" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="container1"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
# 準備繪圖畫布
canvas = doc["fourbar"]
container1 = doc['container1']
ctx = canvas.getContext("2d")

fourbar_data = open("./../40423201/40423201.csv").read()
fourbar_list = fourbar_data.splitlines()
#container1 &lt;= fourbar_list[0]
# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 利用 transform 將 y 座標反轉, 且 offset canvas.height
# (X scale, X skew, Y skew, Y scale, X offset, Y offset)
# 配合圖形位置進行座標轉換
ctx.transform(1, 0, 0, -1, canvas.width/2+250, canvas.height/2+100)
# 畫出 x 與 y 座標線
# 各座標值放大 5 倍
ratio = 5
ctx.moveTo(0, 0)
ctx.lineTo(-30*ratio, 0)
start_point = fourbar_list[0].split(",")
ctx.moveTo(float(start_point[0])*ratio, float(start_point[1])*ratio)
count = 0
for data in fourbar_list[1:]:
    point = data.split(",")
    #count = count + 1
    #container1 &lt;= str(count) + ":" + point[0] + "," + point[1]
    #container1 &lt;= html.BR()
    ctx.lineTo(float(point[0])*ratio, float(point[1])*ratio)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

&lt;p&gt;3.四連桿四足行走機構&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/F1bJfSqUl8k" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;四連桿四足行走機構作動&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/kYJiQ1jHSuc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="teach"></category></entry><entry><title>Week7</title><link href="./Week%207.html" rel="alternate"></link><published>2017-04-05T11:20:00+08:00</published><updated>2017-04-05T11:20:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-04-05:./Week 7.html</id><summary type="html">&lt;p&gt;摘要:繪製八連桿組立&lt;/p&gt;


&lt;h1&gt;onshape畫出八連桿&lt;/h1&gt;

&lt;h2&gt;八連桿零件繪製&lt;/h2&gt;

&lt;p&gt;零件一&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ZkK1wr-stvA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件二&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/yfW-UjA9Fxs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件三&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/AjIHZjwDVv4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件四&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ezBaZFpftFI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件五&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ZbflyGMcui4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件六&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Sh93o3fdSKs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件七&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/sdmyw8TeARw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;零件八&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/BB4KxTjduL8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;尚未完成&lt;/p&gt;
&lt;h1&gt;心得&lt;/h1&gt;

&lt;p&gt;經過上次組過四連桿機構的經驗後，對於這次的作業是更加得心應手,相信之後做類似作業都能夠應對的來&lt;/p&gt;</summary><category term="teach"></category></entry><entry><title>Week 6</title><link href="./Week%206(20170329).html" rel="alternate"></link><published>2017-03-29T11:20:00+08:00</published><updated>2017-03-29T11:20:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-03-29:./Week 6(20170329).html</id><summary type="html">&lt;p&gt;摘要 : 在v-rep匯入用Onshape繪製的四連桿機構，並使他作動&lt;/p&gt;


&lt;h1&gt;四連桿&lt;/h1&gt;

&lt;h2&gt;四連桿零件&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/211594708" width="640" height="439" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/211594708"&gt;40423201四連桿零件&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201機械設計工程系協&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;四連桿組合&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/211594891" width="640" height="439" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/211594891"&gt;40423201四連桿組合&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201機械設計工程系協&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;四連桿匯入v-rep&lt;/h1&gt;

&lt;iframe src="https://player.vimeo.com/video/212843349" width="640" height="456" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/212843349"&gt;v-rep&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201機械設計工程系協&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;心得&lt;/h1&gt;

&lt;p&gt;這次是畫四連桿，多了較多零件，不過上次畫過單連桿，對於軟體也有比較熟悉了，所以操作起來還算可以。&lt;p/&gt;</summary><category term="teach"></category></entry><entry><title>Week 5</title><link href="./Week%205(20170322).html" rel="alternate"></link><published>2017-03-22T11:20:00+08:00</published><updated>2017-03-22T11:20:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-03-22:./Week 5(20170322).html</id><summary type="html">&lt;p&gt;摘要 : 在v-rep匯入用Onshape繪製的單連桿機構，並使他作動&lt;/p&gt;


&lt;h1&gt; v-rep匯入作動&lt;/h1&gt;

&lt;h2&gt;設定v-rep作動&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/210448404" width="640" height="341" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/210448404"&gt;40423201V-ep運動設定&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201機械設計工程系協&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;上課筆記&lt;/h1&gt;

&lt;p&gt;fossil scm server分組設定&lt;/p&gt;

&lt;p&gt;建立和project name同名的首頁wiki&lt;/p&gt;

&lt;p&gt;選擇不同wiki編輯模式Fossil wiki(安全度最高)ˋMarkdown(安全度次之，可放入iframe)ˋHtml(安全度最低)&lt;/p&gt;

&lt;h1&gt;心得&lt;/h1&gt;

&lt;p&gt;在設定的過程看老師影片有一些地方不太了解,實際去研究一些功能後越來越能活用這個軟體&lt;/p&gt;</summary><category term="teach"></category></entry><entry><title>Week 4</title><link href="./Week%204(20170315).html" rel="alternate"></link><published>2017-03-15T11:20:00+08:00</published><updated>2017-03-15T11:20:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-03-15:./Week 4(20170315).html</id><summary type="html">&lt;p&gt;摘要 : 翻譯英文逐字稿以及用solvespace和onshape繪製單連桿機構並轉入v-rep&lt;/p&gt;


&lt;h2&gt;線上 倉儲&lt;/h2&gt;

&lt;p&gt;要在https://mde2a2.kmol.info 中建立第四組的倉儲&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde2a2.kmol.info/cdbg4/wcontent"&gt;第四組&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;40423201 40423203 hyperworks 14-3 翻譯 &lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/209437836" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209437836"&gt;hyperworks 14-3 翻譯 40423203 40423201&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201機械設計工程系協&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;以下是我翻譯的上半部分&lt;/h2&gt;

&lt;h2&gt;one of the biggest new capabilities and hyper works for tino is our new modeling and assembly capabilities in hypermesh&lt;/h2&gt;
&lt;p&gt;最大新功能是我們的新建模和組和能力 &lt;/p&gt;
&lt;p&gt;most people that manufacture products have many different&lt;/p&gt;
&lt;p&gt;許多產品製造有許多不同的配裝 &lt;/p&gt;
&lt;p&gt;configurationsof those products and they want to keep their CAE models very much in sync 
with the CAM and PLM system &lt;/p&gt;
&lt;p&gt;它們希望能與他們的CAE模型與CAM和PLM系統同步&lt;/p&gt;
&lt;p&gt;so now we've introduced into hypermesh the ability  to synchronize directly to the PDM &lt;/p&gt;
&lt;p&gt;所以現在我們介紹了hypermesh能夠直接同步到PDM&lt;/p&gt;
&lt;p&gt;system can actually import those materials with multiple configurations of the model&lt;/p&gt;
&lt;p&gt;系統實際上可以導入那些具有多種配置的材料模型 &lt;/p&gt;
&lt;p&gt;so now the hypermesh model has all those configuratinons in it each part in a 
hypermesh model&lt;/p&gt;
&lt;p&gt;現在hypermesh模型有每個部份的配置&lt;/p&gt;
&lt;p&gt;can now have multiple versions and by just reconfiguring your model you can match 
the configurations that you normally deal with cad model &lt;/p&gt;
&lt;p&gt;所以現在你可以有很多個模型選擇匹配&lt;/p&gt;
&lt;h2&gt;單連桿機構&lt;/h2&gt;

&lt;h2&gt;組合&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/209436379" width="640" height="460" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209436379"&gt;單連桿機構 組合&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201機械設計工程系協&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;零件一&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/209436394" width="640" height="460" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209436394"&gt;單連桿機構 零件一&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201機械設計工程系協&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;零件二&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/209436407" width="640" height="460" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209436407"&gt;單連桿機構 零件二&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201機械設計工程系協&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;零件三&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/209436421" width="640" height="460" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209436421"&gt;單連桿機構 零件三&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201機械設計工程系協&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;導入v-rep&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/209436437" width="640" height="460" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/209436437"&gt;單連桿機構匯入 v-rep&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201機械設計工程系協&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;心得 &lt;/h1&gt;

&lt;p&gt;如果在solvespace上畫好而且能夠正常作動,那是不是代表實體作動,如果真的能夠這樣solvespace會成為很好用的工具&lt;p/&gt;
&lt;p&gt;這次英文翻譯的作業實在是令人感到困難，也知道自己英文能力的不足。用聽的沒字幕只能聽到隻字片語，大概知道是什麼意思，還好youtube有自動翻譯字幕功能，有了字幕翻譯起來簡單多了，不果過還是需要查一些單字才能完成這份作業。&lt;p/&gt;</summary><category term="teach"></category></entry><entry><title>Week 3</title><link href="./Week%203(20170310).html" rel="alternate"></link><published>2017-03-10T11:20:00+08:00</published><updated>2017-03-10T11:20:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-03-10:./Week 3(20170310).html</id><summary type="html">&lt;p&gt;摘要 : 將solvespace三角形模擬軌跡和onshape四連桿組立轉入v-rep&lt;/p&gt;


&lt;h2&gt;solvespace三角形模擬軌跡&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/208328891" width="640" height="460" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/208328891"&gt;三角形模擬軌跡&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;40423201onshape零件一&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/208328770" width="640" height="385" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/208328770"&gt;40423201onshape零件一&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;40423201onshape零件二&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/208328798" width="640" height="385" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/208328798"&gt;40423201onshape零件二&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;40423201onshape零件三&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/208328830" width="640" height="385" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/208328830"&gt;40423201onshape零件三&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;40423201onshape組合&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/208328747" width="640" height="385" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/208328747"&gt;40423201onshape組合&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;40423201將solvespace組立轉入v-rep&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/208328870" width="640" height="460" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/208328870"&gt;40423201將solvespace組立轉入v-rep&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;40423201將onshape組立轉入v-rep&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/208328847" width="640" height="460" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/208328847"&gt;40423201將onshape組立轉入v-rep&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;心得 &lt;/h1&gt;

&lt;p&gt;這一次將自己構想的程式轉入v-rep可以直接知道能不能實際完成動作,這樣就不會浪費成本了。&lt;p/&gt;</summary><category term="teach"></category></entry><entry><title>Week 2</title><link href="./Week%202(20170301).html" rel="alternate"></link><published>2017-03-04T11:20:00+08:00</published><updated>2017-03-04T11:20:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-03-04:./Week 2(20170301).html</id><summary type="html">&lt;p&gt;摘要 : 用solvespace和onshape模擬單軸旋轉連桿系統和四連桿系統&lt;/p&gt;


&lt;h2&gt;組合&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/207329254" width="640" height="384" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/207329254"&gt;40423201組合&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;  四連桿機構 solvespace &lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/207329234" width="640" height="384" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/207329234"&gt;40423201 四連趕&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;零件一&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/207329295" width="640" height="384" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/207329295"&gt;40423201零件一&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;零件二&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/207329313" width="640" height="384" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/207329313"&gt;40423201零件二&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;零件三&lt;/h2&gt;

&lt;iframe src="https://player.vimeo.com/video/207329339" width="640" height="384" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/207329339"&gt;40423201零件三&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;心得 &lt;/h1&gt;

&lt;p&gt;本周要用solvespace和onshape來模擬單軸旋轉連桿系統和四連桿系統。繪圖過程中，覺得有比上學期還了解如何操作solvespace和onshape的功能。
&lt;p/&gt;
&lt;p&gt;
此外還介紹到stunnel:自由的誇平台軟體，用於提供全局的TLS/SSL服務，可提供安全的加密連線。
&lt;p/&gt;</summary><category term="teach"></category></entry><entry><title>Week 1</title><link href="./Week%201(20170222).html" rel="alternate"></link><published>2017-02-22T11:20:00+08:00</published><updated>2017-02-22T11:20:00+08:00</updated><author><name>40423201</name></author><id>tag:,2017-02-22:./Week 1(20170222).html</id><summary type="html">&lt;p&gt;摘要 : 課程內容介紹 - Fossil SCM簡介和V-rep簡介&lt;/p&gt;


&lt;p&gt;ipconfig/all尋找IP位置再去stunnel.conf把裡面的IP改成自己電腦的&lt;/p&gt;

&lt;h1&gt;上課筆記&lt;/h1&gt;

&lt;p&gt;
Fossil SCM簡介 : Fossil SCM 是一套軟體配置管理 (Software Configuration Management) 系統, 其中包含分散式版次控管 (DVC, Distributed Version Control) 、Wiki 、Bug Tracking 與 Technote 等功能, 可以用來控制及追蹤軟體開發專案, 並且紀錄專案開發歷程
&lt;/p&gt;

&lt;p&gt;
V-rep簡介 : V- REP 是機器人仿真中最頂級的軟體，集成開發環境並基於分佈式控制結構：每個對象/模型可以通過內嵌的腳本、插件、ROS 節點、遠程 API 客戶端或定制的解決方案單獨控制。這使得V- REP用途很廣，適用於多機器人應用。控制器可以用 C / C ++ ，Python、Java、Lua、MATLAB、Octave 或 Urbi. 
V- REP 用於快速算法開發、工廠自動化仿真、快速原型和驗證、相關教育、遠程監控機器人、雙安全檢查等。​
&lt;p&gt;V-rep Overview&lt;p/&gt;
&lt;p&gt;http://www.coppeliarobotics.com/assets/v-repoverviewpresentation.pdf &lt;p/&gt;
&lt;/p&gt;
&lt;h1&gt;心得 &lt;/h1&gt;
&lt;p&gt;新的學期開始了，這個學期進入協同產品設計的課程。&lt;/p&gt;
&lt;p&gt;這個禮拜介紹了Fossil SCM簡介，簡單來說，這是管理小的系統，而git是管理大的系統。&lt;/p&gt;
&lt;p&gt;另外還介紹了V-rep簡介，這是一套機器人模擬軟體。&lt;/p&gt;</summary><category term="teach"></category></entry></feed>